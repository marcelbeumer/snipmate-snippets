# group
snippet grp
	console.group(${1});
# group end
snippet grpe
	console.groupEnd();
# log
snippet log
	console.log(${1});
# dir
snippet dir
	console.dir(${1});
# JSON.stringify
snippet jsons
	JSON.stringify(${1})
# JSON.parse
snippet jsono
	JSON.parse(${1})
# Wrap in closure
snippet cl
	(function(){

	${1:// body...}

	})();
# Module
snippet mod
	(function(){

	var ${1:ns} = ${2:parent_obj}.${3:module_name}

	})();
#js boiler for buzz
snippet buzzjs
	/*jshint undef:true, forin:false, eqeqeq:true, browser:true, newcap:true */
	/*global console:true, $:true */
	(function (global) {

	var bm = global.bm,
			_ = bm.util;

	})(this);
# Class
snippet class
	// $1 constructor
	function ${1:class_name}(${2:argument}) {
		${3:// body...}
	}
# Subclass
snippet subclass
	// $1 constructor
	function ${1:class_name}(${2:argument}) {
		$1.__super__.constructor.apply(this, arguments);
		${4:// body...}
	}

	// Inherit from $3
	_.inherits($1, ${3:super_class});
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:// body...}
	};
# Prototype with super
snippet protosuper
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		$1.__super__.$2.
			apply(this, arguments);
		${6:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (${2:i} = 0; $2 < ${1:Things}; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forl
	for (${3:i} = 0; $2 < (${2:l} = ${1:Things}.length); $3${4:++}) {
		${5:$1[$3]}
	};
snippet forr
	for (${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
